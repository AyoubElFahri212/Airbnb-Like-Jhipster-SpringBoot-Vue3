package ma.fullstackclone.airbnb.domain;

import static ma.fullstackclone.airbnb.domain.AssertUtils.bigDecimalCompareTo;
import static ma.fullstackclone.airbnb.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PropertyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyAllPropertiesEquals(Property expected, Property actual) {
        assertPropertyAutoGeneratedPropertiesEquals(expected, actual);
        assertPropertyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyAllUpdatablePropertiesEquals(Property expected, Property actual) {
        assertPropertyUpdatableFieldsEquals(expected, actual);
        assertPropertyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyAutoGeneratedPropertiesEquals(Property expected, Property actual) {
        assertThat(expected)
            .as("Verify Property auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyUpdatableFieldsEquals(Property expected, Property actual) {
        assertThat(expected)
            .as("Verify Property relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e ->
                assertThat(e.getPricePerNight())
                    .as("check pricePerNight")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getPricePerNight())
            )
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e ->
                assertThat(e.getLatitude()).as("check latitude").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getLatitude())
            )
            .satisfies(e ->
                assertThat(e.getLongitude()).as("check longitude").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getLongitude())
            )
            .satisfies(e -> assertThat(e.getNumberOfRooms()).as("check numberOfRooms").isEqualTo(actual.getNumberOfRooms()))
            .satisfies(e -> assertThat(e.getNumberOfBathrooms()).as("check numberOfBathrooms").isEqualTo(actual.getNumberOfBathrooms()))
            .satisfies(e -> assertThat(e.getMaxGuests()).as("check maxGuests").isEqualTo(actual.getMaxGuests()))
            .satisfies(e -> assertThat(e.getPropertySize()).as("check propertySize").isEqualTo(actual.getPropertySize()))
            .satisfies(e ->
                assertThat(e.getAvailabilityStart())
                    .as("check availabilityStart")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getAvailabilityStart())
            )
            .satisfies(e ->
                assertThat(e.getAvailabilityEnd())
                    .as("check availabilityEnd")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getAvailabilityEnd())
            )
            .satisfies(e -> assertThat(e.getInstantBook()).as("check instantBook").isEqualTo(actual.getInstantBook()))
            .satisfies(e -> assertThat(e.getMinimumStay()).as("check minimumStay").isEqualTo(actual.getMinimumStay()))
            .satisfies(e -> assertThat(e.getCancellationPolicy()).as("check cancellationPolicy").isEqualTo(actual.getCancellationPolicy()))
            .satisfies(e -> assertThat(e.getHouseRules()).as("check houseRules").isEqualTo(actual.getHouseRules()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPropertyUpdatableRelationshipsEquals(Property expected, Property actual) {
        assertThat(expected)
            .as("Verify Property relationships")
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getAmenities()).as("check amenities").isEqualTo(actual.getAmenities()))
            .satisfies(e -> assertThat(e.getCategories()).as("check categories").isEqualTo(actual.getCategories()));
    }
}
