package ma.fullstackclone.airbnb.domain;

import static ma.fullstackclone.airbnb.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PromotionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionAllPropertiesEquals(Promotion expected, Promotion actual) {
        assertPromotionAutoGeneratedPropertiesEquals(expected, actual);
        assertPromotionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionAllUpdatablePropertiesEquals(Promotion expected, Promotion actual) {
        assertPromotionUpdatableFieldsEquals(expected, actual);
        assertPromotionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionAutoGeneratedPropertiesEquals(Promotion expected, Promotion actual) {
        assertThat(expected)
            .as("Verify Promotion auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionUpdatableFieldsEquals(Promotion expected, Promotion actual) {
        assertThat(expected)
            .as("Verify Promotion relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDiscountType()).as("check discountType").isEqualTo(actual.getDiscountType()))
            .satisfies(e ->
                assertThat(e.getDiscountValue())
                    .as("check discountValue")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getDiscountValue())
            )
            .satisfies(e -> assertThat(e.getValidFrom()).as("check validFrom").isEqualTo(actual.getValidFrom()))
            .satisfies(e -> assertThat(e.getValidUntil()).as("check validUntil").isEqualTo(actual.getValidUntil()))
            .satisfies(e -> assertThat(e.getMaxUses()).as("check maxUses").isEqualTo(actual.getMaxUses()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPromotionUpdatableRelationshipsEquals(Promotion expected, Promotion actual) {
        // empty method
    }
}
